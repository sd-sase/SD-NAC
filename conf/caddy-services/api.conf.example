# Copyright (C) Inverse inc.
{
	admin off
	log {
		output stdout
		format transform "{common_log}"
	}
	auto_https off
}

:9999 {
	tls /usr/local/pf/conf/ssl/server.crt /usr/local/pf/conf/ssl/server.key

	handle_errors {
		@502-503 expression `{err.status_code} in [502, 503]`
		handle @502-503 {
			rewrite * /{err.status_code}.json
			file_server {
				root /usr/local/pf/html/pfappserver/root/errors/
			}
		}

		handle {
			respond ""
		}
	}

	route {
		pfconfigpool {
			dont_rlock /api/v1/pfconnector/tunnel
		}

		logger {
			level INFO
		}

		statsd {
			proto udp
			prefix api
			address {$STATSD_ADDRESS}
		}

		cors /api/v1/* {
			allowed_headers Authorization,Content-Type
			methods GET,OPTIONS,POST,DELETE,PUT,PATCH
		}

		cors /api/v1.1/* {
			allowed_headers Authorization,Content-Type
			methods GET,OPTIONS,POST,DELETE,PUT,PATCH
		}

		api-aaa {
			no_auth /api/v1/pfconnector/tunnel
			session_backend db mem
		}

		api

		log-tailer

		# Job status access
		job-status

		reverse_proxy /api/v1/pfconnector/* {$PF_SERVICES_URL_PFCONNECTOR_SERVER} {
		}

		# pfipset API access
		reverse_proxy /api/v1/ipset/* {$PF_SERVICES_URL_PFIPSET} {
		}

		# pfdhcp API access
		reverse_proxy /api/v1/dhcp/* {$PF_SERVICES_URL_PFDHCP} {
		}

		# pfsso API access
		reverse_proxy /api/v1/firewall_sso/* {$PF_SERVICES_URL_PFSSO} {
		}

		# pfpki API access
		reverse_proxy /api/v1/pki/* {$PF_SERVICES_URL_PFPKI} {
		}

		# Everything else goes to the Perl API
		reverse_proxy /api/v1/* {$PF_SERVICES_URL_PFPERL_API} {
		}

		# Everything else goes to the Perl API
		reverse_proxy /api/v1.1/* {$PF_SERVICES_URL_PFPERL_API} {
		}

		# doh forward
		reverse_proxy /dns-query/* {$PF_SERVICES_URL_PFDNS_DOH} {
		}
	}
}

####
## The configuration below allows to use this server as a proxy
#:9990 {
#  pfconfigpool
#  logger {
#    level INFO
#  }
#  statsd {
#    proto udp
#    prefix api-proxy
#  }
#
#  api-aaa
#  forwardproxy
#}
